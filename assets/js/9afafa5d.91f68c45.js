"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[3036],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=n.createContext({}),l=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(m.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(r),f=a,p=d["".concat(m,".").concat(f)]||d[f]||c[f]||i;return r?n.createElement(p,s(s({ref:t},u),{},{components:r})):n.createElement(p,s({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=f;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8109:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={},s="NumberOfFrames",o={unversionedId:"tutorial-basics/Getter Methods/number-of-frames",id:"tutorial-basics/Getter Methods/number-of-frames",title:"NumberOfFrames",description:"GetNumberOfFrames",source:"@site/docs/tutorial-basics/Getter Methods/number-of-frames.md",sourceDirName:"tutorial-basics/Getter Methods",slug:"/tutorial-basics/Getter Methods/number-of-frames",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/number-of-frames",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Getter Methods/number-of-frames.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NumberOfDirection",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/number-of-direction"},next:{title:"Load",permalink:"/UnityDmiReader/docs/tutorial-basics/Primary Methods/primary-load"}},m={},l=[{value:"GetNumberOfFrames",id:"getnumberofframes",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Using stateIndex:",id:"using-stateindex",level:4},{value:"Using stateName:",id:"using-statename",level:4}],u={toc:l},d="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"numberofframes"},"NumberOfFrames"),(0,a.kt)("h2",{id:"getnumberofframes"},"GetNumberOfFrames"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"public int GetNumberOfFrames(int stateIndex);\npublic int GetNumberOfFrames(string stateName);\n")),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"GetNumberOfFrames")," method is used to retrieve the number of frames for a specific animation state. There are two overloads for this method, allowing the user to specify the state either by its index or by its name."),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stateIndex")," (int): The index of the animation state for which to retrieve the number of frames."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stateName")," (string): The name of the animation state for which to retrieve the number of frames.")),(0,a.kt)("h3",{id:"return-value"},"Return Value"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int"),": The method return the number of frames in one state if valid; otherwise, it returns -1.")),(0,a.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Validates the provided state index or state name."),(0,a.kt)("li",{parentName:"ol"},"If the index is out of range, or if the state name does not correspond to any state, the method returns -1."),(0,a.kt)("li",{parentName:"ol"},"Retrieves the number of frames for the specified animation state based on either the index or the name provided."),(0,a.kt)("li",{parentName:"ol"},"Returns the number of frames in the specified animation state.")),(0,a.kt)("h3",{id:"example-usage"},"Example Usage"),(0,a.kt)("h4",{id:"using-stateindex"},"Using stateIndex:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        if (this._dmi.Load("dmi_file_path")) {\n            Debug.Log("Number of frames in state with index 2: " + this._dmi.GetNumberOfFrames(2));\n        }\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() {}\n}\n')),(0,a.kt)("h4",{id:"using-statename"},"Using stateName:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        if (this._dmi.Load("dmi_file_path")) {\n            Debug.Log("Number of frames in state named \'stateName\': " + this._dmi.GetNumberOfFrames("stateName"));\n        }\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() {}\n}\n')),(0,a.kt)("hr",null))}c.isMDXComponent=!0}}]);