"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[5679],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),m=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(n),c=r,f=d["".concat(l,".").concat(c)]||d[c]||u[c]||a;return n?i.createElement(f,o(o({ref:t},p),{},{components:n})):i.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var m=2;m<a;m++)o[m]=n[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9987:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var i=n(7462),r=(n(7294),n(3905));const a={},o="CurrentAnimationSprite",s={unversionedId:"tutorial-basics/Getter Methods/current-animation-sprite",id:"tutorial-basics/Getter Methods/current-animation-sprite",title:"CurrentAnimationSprite",description:"GetCurrentAnimationSprite",source:"@site/docs/tutorial-basics/Getter Methods/current-animation-sprite.md",sourceDirName:"tutorial-basics/Getter Methods",slug:"/tutorial-basics/Getter Methods/current-animation-sprite",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/current-animation-sprite",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Getter Methods/current-animation-sprite.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CurrentAnimationIndex",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/current-animation-index"},next:{title:"GetImage",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/get-image"}},l={},m=[{value:"GetCurrentAnimationSprite",id:"getcurrentanimationsprite",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Using stateIndex:",id:"using-stateindex",level:4},{value:"Using stateName:",id:"using-statename",level:4},{value:"Remarks",id:"remarks",level:3}],p={toc:m},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"currentanimationsprite"},"CurrentAnimationSprite"),(0,r.kt)("h2",{id:"getcurrentanimationsprite"},"GetCurrentAnimationSprite"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'public Sprite GetCurrentAnimationSprite(int stateIndex = 0, int animationIndex = -1);\npublic Sprite GetCurrentAnimationSprite(string stateName = "", int animationIndex = -1);\n')),(0,r.kt)("h3",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetCurrentAnimationSprite")," method retrieves the current animation sprite for a given state. There are two overloads for this method, allowing the user to specify the state either by its index or by its name."),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stateIndex")," (int, optional): The index of the animation state. Defaults to 0 if not specified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stateName")," (string, optional): The name of the animation state. Defaults to an empty string if not specified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"animationIndex")," (int, optional): The index of the animation within the state. Defaults to -1 which selects the default animation for the state.")),(0,r.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Validates the provided state index or state name."),(0,r.kt)("li",{parentName:"ol"},"If the state index is out of range, or if the state name does not correspond to any state, the method returns the first sprite as a fallback."),(0,r.kt)("li",{parentName:"ol"},"Retrieves the state based on the provided index or name."),(0,r.kt)("li",{parentName:"ol"},"Depending on the number of directions in the state, it retrieves and returns the appropriate sprite."),(0,r.kt)("li",{parentName:"ol"},"If the state directions are invalid, returns the first sprite as a fallback.")),(0,r.kt)("h3",{id:"example-usage"},"Example Usage"),(0,r.kt)("h4",{id:"using-stateindex"},"Using stateIndex:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAnimation(2);\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() \n    {\n        Sprite currentSprite = dmi.GetCurrentAnimationSprite(2, DMI.DownDirection);\n    }\n}\n')),(0,r.kt)("h4",{id:"using-statename"},"Using stateName:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAnimation("stateName");\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() \n    {\n        Sprite currentSprite = this._dmi.GetCurrentAnimationSprite("stateName", DMI.DownDirection);\n    }\n}\n')),(0,r.kt)("h3",{id:"remarks"},"Remarks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the state index or state name is invalid, this method will return the first sprite as a fallback."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"animationIndex")," parameter is optional, and if not specified or set to -1, the default animation for the state will be selected.")))}u.isMDXComponent=!0}}]);