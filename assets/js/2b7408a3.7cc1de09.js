"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[6059],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),m=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=m(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=m(n),c=a,h=d["".concat(l,".").concat(c)]||d[c]||p[c]||r;return n?i.createElement(h,s(s({ref:t},u),{},{components:n})):i.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var m=2;m<r;m++)s[m]=n[m];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var i=n(7462),a=(n(7294),n(3905));const r={},s="Resume",o={unversionedId:"tutorial-basics/Animation Methods/resume-animation",id:"tutorial-basics/Animation Methods/resume-animation",title:"Resume",description:"ResumeAnimation",source:"@site/docs/tutorial-basics/Animation Methods/resume-animation.md",sourceDirName:"tutorial-basics/Animation Methods",slug:"/tutorial-basics/Animation Methods/resume-animation",permalink:"/UnityDmiReader/docs/tutorial-basics/Animation Methods/resume-animation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Animation Methods/resume-animation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pause",permalink:"/UnityDmiReader/docs/tutorial-basics/Animation Methods/pause-animation"},next:{title:"Start",permalink:"/UnityDmiReader/docs/tutorial-basics/Animation Methods/start-animation"}},l={},m=[{value:"ResumeAnimation",id:"resumeanimation",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Using stateIndex:",id:"using-stateindex",level:4},{value:"Using stateName:",id:"using-statename",level:4},{value:"ResumeAllAnimation",id:"resumeallanimation",level:2},{value:"Description",id:"description-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Detailed Flow",id:"detailed-flow-1",level:3},{value:"Example Usage",id:"example-usage-1",level:3}],u={toc:m},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"resume"},"Resume"),(0,a.kt)("h2",{id:"resumeanimation"},"ResumeAnimation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'public void ResumeAnimation(int stateIndex = 0);\npublic void ResumeAnimation(string stateName = "");\n')),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ResumeAnimation")," method is used to resume an animation for a specific state if it is paused. There are two overloads for this method, allowing the user to specify the state either by its index or by its name."),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stateIndex")," (int, optional): The index of the animation state to resume. Default value is 0."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stateName")," (string, optional): The name of the animation state to resume. Default value is an empty string.")),(0,a.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Validates the provided state index or state name."),(0,a.kt)("li",{parentName:"ol"},"If the index is out of range, or if the state name does not correspond to any state, the method returns without doing anything."),(0,a.kt)("li",{parentName:"ol"},"Sets the ",(0,a.kt)("inlineCode",{parentName:"li"},"isPlaying")," property of the specified animation state to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", effectively resuming the animation.")),(0,a.kt)("h3",{id:"example-usage"},"Example Usage"),(0,a.kt)("h4",{id:"using-stateindex"},"Using stateIndex:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAnimation(2);\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update()\n    {\n        Sprite sprite = this._dmi.CurrentAnimationSprite(2, DMI.DownDirection);\n        if (Input.GetKeyDown(KeyCode.Space)) {\n            if (this._dmi.IsAnimationPlaying(2) == false)\n                this._dmi.ResumeAnimation(2);\n        }\n    }\n}\n')),(0,a.kt)("h4",{id:"using-statename"},"Using stateName:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAnimation("stateName");\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update()\n    {\n        Sprite sprite = this._dmi.CurrentAnimationSprite("stateName", DMI.DownDirection);\n        if (Input.GetKeyDown(KeyCode.Space) == false) {\n            if (this._dmi.IsAnimationPlaying("stateName"))\n                this._dmi.ResumeAnimation("stateName");\n        }\n    }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"resumeallanimation"},"ResumeAllAnimation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"public void ResumeAllAnimation();\n")),(0,a.kt)("h3",{id:"description-1"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ResumeAllAnimation")," method is used to resume all paused animations. It iterates through all the animation states and sets them to play."),(0,a.kt)("h3",{id:"parameters-1"},"Parameters"),(0,a.kt)("p",null,"This method does not take any parameters."),(0,a.kt)("h3",{id:"detailed-flow-1"},"Detailed Flow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Iterates through each animation state in the collection of states."),(0,a.kt)("li",{parentName:"ol"},"Sets the ",(0,a.kt)("inlineCode",{parentName:"li"},"isPlaying")," property of each animation state to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", indicating that the animation should resume playing.")),(0,a.kt)("h3",{id:"example-usage-1"},"Example Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAllAnimation();\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update()\n    {\n        Sprite sprite = this._dmi.CurrentAnimationSprite(0, DMI.DownDirection);\n        if (Input.GetKeyDown(KeyCode.Space)) {\n            if (this._dmi.IsAllAnimationPlaying() == false)\n                this._dmi.ResumeAllAnimation();\n        }\n    }\n}\n')),(0,a.kt)("hr",null))}p.isMDXComponent=!0}}]);