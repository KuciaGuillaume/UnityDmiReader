"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[3007],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(a),u=n,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return a?r.createElement(h,o(o({ref:t},p),{},{components:a})):r.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:n,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8410:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const i={},o="Load",l={unversionedId:"tutorial-basics/Primary Methods/primary-load",id:"tutorial-basics/Primary Methods/primary-load",title:"Load",description:"Load Methods",source:"@site/docs/tutorial-basics/Primary Methods/primary-load.md",sourceDirName:"tutorial-basics/Primary Methods",slug:"/tutorial-basics/Primary Methods/primary-load",permalink:"/UnityDmiReader/docs/tutorial-basics/Primary Methods/primary-load",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Primary Methods/primary-load.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NumberOfFrames",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/number-of-frames"},next:{title:"AnimationCount",permalink:"/UnityDmiReader/docs/tutorial-basics/Setter Methods/animation-count"}},s={},d=[{value:"Load Methods",id:"load-methods",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3}],p={toc:d},m="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"load"},"Load"),(0,n.kt)("h2",{id:"load-methods"},"Load Methods"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"public bool Load(string filePath);\n")),(0,n.kt)("h3",{id:"description"},"Description"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Load")," method is responsible for loading a DMI file from the provided file path. It reads the file, extracts metadata and image data, then validates and processes this data to create DMI sprites and state information."),(0,n.kt)("h3",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"filepath")," (string): The relative path to the DMI file from the application's data path.")),(0,n.kt)("h3",{id:"return-value"},"Return Value"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bool"),": Returns ",(0,n.kt)("inlineCode",{parentName:"li"},"true")," if the DMI file is successfully loaded, and ",(0,n.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,n.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Combines the given relative file path with the application's data path to get the full path of the DMI file."),(0,n.kt)("li",{parentName:"ol"},"Checks if the file exists. If not, logs an error and returns ",(0,n.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,n.kt)("li",{parentName:"ol"},"Reads the entire DMI file into a byte array."),(0,n.kt)("li",{parentName:"ol"},"If the byte array is null or empty, logs an error and returns ",(0,n.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,n.kt)("li",{parentName:"ol"},"Reads the text contained in the ",(0,n.kt)("inlineCode",{parentName:"li"},"zTXt")," chunk of the DMI file."),(0,n.kt)("li",{parentName:"ol"},"If the ",(0,n.kt)("inlineCode",{parentName:"li"},"zTXt")," chunk is null, logs an error indicating a problem loading metadata and returns ",(0,n.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,n.kt)("li",{parentName:"ol"},"Parses the ",(0,n.kt)("inlineCode",{parentName:"li"},"zTXt")," chunk into a ",(0,n.kt)("inlineCode",{parentName:"li"},"DmiData")," object."),(0,n.kt)("li",{parentName:"ol"},"Decodes the image from the DMI file and creates a sprite from it."),(0,n.kt)("li",{parentName:"ol"},"Validates the DMI version and dimensions (width and height) contained in the metadata."),(0,n.kt)("li",{parentName:"ol"},"Initializes class properties such as width, height, and states."),(0,n.kt)("li",{parentName:"ol"},"Loops through each state and retrieves the frames, direction, animation loop count, and state name."),(0,n.kt)("li",{parentName:"ol"},"Loads images and animation wait times for each state."),(0,n.kt)("li",{parentName:"ol"},"In case of any exceptions, logs the error details and returns ",(0,n.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,n.kt)("li",{parentName:"ol"},"If execution reaches this point without errors, the method returns ",(0,n.kt)("inlineCode",{parentName:"li"},"true"),", indicating the DMI file was successfully loaded.")),(0,n.kt)("h3",{id:"example-usage"},"Example Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'// Create an instance of the class containing the Load method.\nvar dmiLoader = new DmiLoader();\n\n// Specify the relative file path to the DMI file.\nstring relativeFilePath = "path_to_dmi_file.dmi";\n\n// Call the Load method and store the result.\nbool isLoaded = dmiLoader.Load(relativeFilePath);\n\n// Output the result.\nif (isLoaded)\n{\n    Console.WriteLine("DMI file successfully loaded.");\n}\nelse\n{\n    Console.WriteLine("Failed to load DMI file.");\n}\n')),(0,n.kt)("hr",null))}c.isMDXComponent=!0}}]);