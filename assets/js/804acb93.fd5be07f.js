"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[3014],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=i,f=d["".concat(l,".").concat(p)]||d[p]||c[p]||a;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3726:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={},o="NumberOfDirection",s={unversionedId:"tutorial-basics/Getter Methods/number-of-direction",id:"tutorial-basics/Getter Methods/number-of-direction",title:"NumberOfDirection",description:"GetNumberOfDirection",source:"@site/docs/tutorial-basics/Getter Methods/number-of-direction.md",sourceDirName:"tutorial-basics/Getter Methods",slug:"/tutorial-basics/Getter Methods/number-of-direction",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/number-of-direction",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Getter Methods/number-of-direction.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IsInfiniteLoopAnimation",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/is-inifinite-loop"},next:{title:"NumberOfFrames",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/number-of-frames"}},l={},u=[{value:"GetNumberOfDirection",id:"getnumberofdirection",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Using stateIndex:",id:"using-stateindex",level:4},{value:"Using stateName:",id:"using-statename",level:4}],m={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"numberofdirection"},"NumberOfDirection"),(0,i.kt)("h2",{id:"getnumberofdirection"},"GetNumberOfDirection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"public int GetNumberOfDirection(int stateIndex);\npublic int GetNumberOfDirection(string stateName);\n")),(0,i.kt)("h3",{id:"description"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"GetNumberOfDirection")," method is used to retrieve the number of animations for a specific state. There are two overloads for this method, allowing the user to specify the state either by its index or by its name."),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stateIndex")," (int, optional): The index of the state for which the number of animations is to be retrieved."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stateName")," (string, optional): The name of the state for which the number of animations is to be retrieved.")),(0,i.kt)("h3",{id:"return-value"},"Return Value"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int"),": The method return the number of directions in one state if valid; otherwise, it returns -1.")),(0,i.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Validates the provided state index or state name."),(0,i.kt)("li",{parentName:"ol"},"If the state index is out of range, or if the state name does not correspond to any state, the method returns -1."),(0,i.kt)("li",{parentName:"ol"},"Retrieves the number of animations for the state based on either the index or the name provided."),(0,i.kt)("li",{parentName:"ol"},"Returns the number of animations in the state.")),(0,i.kt)("h3",{id:"example-usage"},"Example Usage"),(0,i.kt)("h4",{id:"using-stateindex"},"Using stateIndex:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        if (this._dmi.Load("dmi_file_path")) {\n            Debug.Log("Number of directions in state index 2: " + this._dmi.GetNumberOfDirection(2));\n        }\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() {}\n}\n')),(0,i.kt)("h4",{id:"using-statename"},"Using stateName:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        if (this._dmi.Load("dmi_file_path")) {\n            Debug.Log("Number of directions in " + "stateName" + " state: " + this._dmi.GetNumberOfDirection("stateName"));\n        }\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() {}\n}\n')),(0,i.kt)("hr",null))}c.isMDXComponent=!0}}]);