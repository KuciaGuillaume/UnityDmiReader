"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[9452],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),m=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=m(n),c=i,f=p["".concat(l,".").concat(c)]||p[c]||d[c]||a;return n?o.createElement(f,r(r({ref:t},u),{},{components:n})):o.createElement(f,r({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<a;m++)r[m]=n[m];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var o=n(7462),i=(n(7294),n(3905));const a={},r="AnimationsLoopCount",s={unversionedId:"tutorial-basics/Getter Methods/animation-loop-count",id:"tutorial-basics/Getter Methods/animation-loop-count",title:"AnimationsLoopCount",description:"GetAnimationsLoopCount",source:"@site/docs/tutorial-basics/Getter Methods/animation-loop-count.md",sourceDirName:"tutorial-basics/Getter Methods",slug:"/tutorial-basics/Getter Methods/animation-loop-count",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/animation-loop-count",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Getter Methods/animation-loop-count.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stop",permalink:"/UnityDmiReader/docs/tutorial-basics/Animation Methods/stop-animation"},next:{title:"CurrentAnimationIndex",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/current-animation-index"}},l={},m=[{value:"GetAnimationsLoopCount",id:"getanimationsloopcount",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Using stateIndex:",id:"using-stateindex",level:4},{value:"Using stateName:",id:"using-statename",level:4}],u={toc:m},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"animationsloopcount"},"AnimationsLoopCount"),(0,i.kt)("h2",{id:"getanimationsloopcount"},"GetAnimationsLoopCount"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"public int GetAnimationsLoopCount(int stateIndex);\npublic int GetAnimationsLoopCount(string stateName);\n")),(0,i.kt)("h3",{id:"description"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"GetAnimationsLoopCount")," method is used to retrieve the number of loops for the animation at a given state. There are two overloads for this method, allowing the user to specify the state either by its index or by its name."),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stateIndex")," (int): The index of the state for which the number of animation loops is to be retrieved."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stateName")," (string): The name of the animation state for which the number of loops is to be retrieved.")),(0,i.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Validates the provided state index or state name."),(0,i.kt)("li",{parentName:"ol"},"If the index is out of range or the state name does not correspond to any state, the method returns -1."),(0,i.kt)("li",{parentName:"ol"},"Retrieves the number of animation loops for the specified state based on either the index or the name provided."),(0,i.kt)("li",{parentName:"ol"},"Returns the number of animation loops. If the state is not found or is invalid, it returns -1.")),(0,i.kt)("h3",{id:"example-usage"},"Example Usage"),(0,i.kt)("h4",{id:"using-stateindex"},"Using stateIndex:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        if (this._dmi.Load("dmi_file_path")) {\n            int loopCount = dmi.GetAnimationsLoopCount(2);\n            Debug.Log(this._dmi.GetAnimationsLoopCount(2));\n        }\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() {}\n}\n')),(0,i.kt)("h4",{id:"using-statename"},"Using stateName:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        if (this._dmi.Load("dmi_file_path")) {\n            int loopCount = dmi.GetAnimationsLoopCount("stateName");\n            Debug.Log(this._dmi.GetAnimationsLoopCount(2));\n        }\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() {}\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Please note that you may need to adapt the examples to fit the specific implementation and context of your application."))}d.isMDXComponent=!0}}]);