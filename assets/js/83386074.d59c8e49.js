"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[5401],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(n),c=i,g=p["".concat(o,".").concat(c)]||p[c]||u[c]||l;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<l;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=n(7462),i=(n(7294),n(3905));const l={},r="IsAnimationPlaying",s={unversionedId:"tutorial-basics/Getter Methods/is-animation-playing",id:"tutorial-basics/Getter Methods/is-animation-playing",title:"IsAnimationPlaying",description:"isAnimationPlaying",source:"@site/docs/tutorial-basics/Getter Methods/is-animation-playing.md",sourceDirName:"tutorial-basics/Getter Methods",slug:"/tutorial-basics/Getter Methods/is-animation-playing",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/is-animation-playing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Getter Methods/is-animation-playing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ImageSpriteAtIndex",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/image-at-index"},next:{title:"IsInfiniteLoopAnimation",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/is-inifinite-loop"}},o={},m=[{value:"isAnimationPlaying",id:"isanimationplaying-1",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Using stateIndex:",id:"using-stateindex",level:4},{value:"Using stateName:",id:"using-statename",level:4},{value:"IsAllAnimationPlaying",id:"isallanimationplaying",level:2},{value:"Description",id:"description-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Detailed Flow",id:"detailed-flow-1",level:3},{value:"Example Usage",id:"example-usage-1",level:3},{value:"IsOneAnimationPlaying",id:"isoneanimationplaying",level:2},{value:"Description",id:"description-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Detailed Flow",id:"detailed-flow-2",level:3},{value:"Example Usage",id:"example-usage-2",level:3}],d={toc:m},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"isanimationplaying"},"IsAnimationPlaying"),(0,i.kt)("h2",{id:"isanimationplaying-1"},"isAnimationPlaying"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'public bool isAnimationPlaying(int stateIndex = 0);\npublic bool isAnimationPlaying(string stateName = "");\n')),(0,i.kt)("h3",{id:"description"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"isAnimationPlaying")," method is used to check if an animation is currently playing for a specific state. There are two overloads for this method, allowing the user to specify the state either by its index or by its name."),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stateIndex")," (int, optional): The index of the animation state to check. Default value is 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stateName")," (string, optional): The name of the animation state to check. Default value is an empty string.")),(0,i.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Validates the provided state index or state name."),(0,i.kt)("li",{parentName:"ol"},"If the index is out of range, or if the state name does not correspond to any state, the method returns ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ol"},"If the image data does not exist, the method returns ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ol"},"Retrieves the playing status of the animation state based on either the index or the name provided."),(0,i.kt)("li",{parentName:"ol"},"Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the animation is playing, otherwise returns ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("h3",{id:"example-usage"},"Example Usage"),(0,i.kt)("h4",{id:"using-stateindex"},"Using stateIndex:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAnimation(2);\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() \n    {\n        Debug.Log("Is playing: " + this._dmi.IsAnimationPlaying(2));\n    }\n}\n')),(0,i.kt)("h4",{id:"using-statename"},"Using stateName:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAnimation("stateName");\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() \n    {\n        Debug.Log("Is playing: " + this._dmi.IsAnimationPlaying("stateName"));\n    }\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"isallanimationplaying"},"IsAllAnimationPlaying"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"public bool IsAllAnimationPlaying();\n")),(0,i.kt)("h3",{id:"description-1"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IsAllAnimationPlaying")," method is used to check if all animations within the DMI file are currently playing. It iterates through each animation state and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if it finds any animation that is not playing. If all animations are playing, it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h3",{id:"parameters-1"},"Parameters"),(0,i.kt)("p",null,"This method does not take any parameters."),(0,i.kt)("h3",{id:"detailed-flow-1"},"Detailed Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Iterates through each ",(0,i.kt)("inlineCode",{parentName:"li"},"DmiState")," in the internal states list."),(0,i.kt)("li",{parentName:"ol"},"If it finds a state where ",(0,i.kt)("inlineCode",{parentName:"li"},"isPlaying")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", it immediately returns ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ol"},"If the method iterates through all the states without finding a non-playing animation, it returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,i.kt)("h3",{id:"example-usage-1"},"Example Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAllAnimation();\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() \n    {\n        Debug.Log("All is playing: " + this._dmi.IsAllAnimationPlaying());\n    }\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"isoneanimationplaying"},"IsOneAnimationPlaying"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"public bool IsOneAnimationPlaying();\n")),(0,i.kt)("h3",{id:"description-2"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IsOneAnimationPlaying")," method is used to check if at least one animation is currently playing among the DMI states. "),(0,i.kt)("h3",{id:"parameters-2"},"Parameters"),(0,i.kt)("p",null,"This method does not accept any parameters."),(0,i.kt)("h3",{id:"detailed-flow-2"},"Detailed Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Iterates through each DMI state."),(0,i.kt)("li",{parentName:"ol"},"If an animation is found to be playing in any state, the method immediately returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,i.kt)("li",{parentName:"ol"},"If no animations are playing, the method returns ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("h3",{id:"example-usage-2"},"Example Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        this._dmi.StartAnimation("stateName");\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() \n    {\n        Debug.Log("One is playing: " + this._dmi.IsOneAnimationPlaying());\n    }\n}\n')),(0,i.kt)("hr",null))}u.isMDXComponent=!0}}]);