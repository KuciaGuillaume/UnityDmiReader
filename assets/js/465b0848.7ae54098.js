"use strict";(self.webpackChunkunity_dmi_reader=self.webpackChunkunity_dmi_reader||[]).push([[2148],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,g=c["".concat(s,".").concat(d)]||c[d]||p[d]||i;return r?n.createElement(g,l(l({ref:t},m),{},{components:r})):n.createElement(g,l({ref:t},m))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2761:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={},l="GetImage",o={unversionedId:"tutorial-basics/Getter Methods/get-image",id:"tutorial-basics/Getter Methods/get-image",title:"GetImage",description:"GetImage",source:"@site/docs/tutorial-basics/Getter Methods/get-image.md",sourceDirName:"tutorial-basics/Getter Methods",slug:"/tutorial-basics/Getter Methods/get-image",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/get-image",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Getter Methods/get-image.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CurrentAnimationSprite",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/current-animation-sprite"},next:{title:"ImageSpriteAtIndex",permalink:"/UnityDmiReader/docs/tutorial-basics/Getter Methods/image-at-index"}},s={},u=[{value:"GetImage",id:"getimage-1",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Detailed Flow",id:"detailed-flow",level:3},{value:"Example Usage",id:"example-usage",level:3}],m={toc:u},c="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getimage"},"GetImage"),(0,a.kt)("h2",{id:"getimage-1"},"GetImage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"public Sprite? GetImage();\n")),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"GetImage")," method is used to retrieve the DMI image sprite. If the DMI file has not been loaded successfully, it returns ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"This method does not take any parameters."),(0,a.kt)("h3",{id:"return-value"},"Return Value"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sprite?"),": The method return a general image sprite if valid; otherwise, it returns null.")),(0,a.kt)("h3",{id:"detailed-flow"},"Detailed Flow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Returns the DMI image sprite (",(0,a.kt)("inlineCode",{parentName:"li"},"_img"),") stored in the object."),(0,a.kt)("li",{parentName:"ol"},"If the DMI file has not been loaded or if the image sprite is not available, it returns ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,a.kt)("h3",{id:"example-usage"},"Example Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ExampleUnityClass : MonoBehaviour\n{\n    // Define a private DMI object\n    private DMI _dmi;\n\n    /// <summary>\n    /// Start is called before the first frame update.\n    /// </summary>\n    void Start()\n    {\n        this._dmi = gameObject.AddComponent<DMI>();\n        this._dmi.Load("dmi_file_path");\n        Sprite dmiImage = this._dmi.GetImage();\n    }\n\n    /// <summary>\n    /// Update is called once per frame.\n    /// </summary>\n    void Update() {}\n}\n')),(0,a.kt)("hr",null))}p.isMDXComponent=!0}}]);